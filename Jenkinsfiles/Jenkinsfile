node {    

    properties ([
        parameters ([

                string(name: 'SERVICE', description: 'Service to be built/deployed'),
                string(name: 'NAMESPACE', defaultValue: 'default', description: 'K8 namespace to deploy the service to'),
                string(name: 'TAG', description: 'Docker image tag. If left empty, it equals to the build number'),
        ])
    ])

    def IMAGE

    def GIT_COMMIT
    def PROJECT_NAME="${env.SERVICE}"
    def TAG

    def K8TOKEN = credentials('k8token')
    def K8SERVER = credentials('k8server')

    // def KUBECTL="kubectl --insecure-skip-tls-verify --token=${K8TOKEN} --server=${K8SERVER} -n ${env.NAMESPACE} --kubeconfig=/dev/null"


    if (env.TAG == "") {

        TAG = BUILD_NUMBER
    }

    // clean workspace before starting operations
    cleanWs()


    stage('Clone repository') {               

        checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '58d47cc6-9619-4aeb-a9bc-2c91f0aa74fb', url: 'git@github.com:barbabjetolov/endocode-test.git']]])

        GIT_COMMIT = sh(script: 'git rev-list -1 HEAD', returnStdout: true)

    }

    stage('Unit Tests') {

        docker.image('erizzardi/gomagit:latest').inside("-v ${WORKSPACE}/:/project") { // run unit tests in a container with go, make and git
            
            STATUS = sh(script: "make test", returnStatus: true)
        }

        if (STATUS != 0) {
            error("Unit tests failed! Aborting.")
        }
    }

    stage('Non-regression Tests') {

        // add non-regression tests!!
    }

    stage('Build image') {         
    
        IMAGE = docker.build("erizzardi/${env.SERVICE}:${TAG}")
    }

    // push image to dockerhub
    stage('Push image') {

        docker.withRegistry('https://registry.hub.docker.com/', 'dockerhub') {
        
            docker.build("erizzardi/${env.SERVICE}").push("${TAG}")
        }
    }

    stage('Deploy service to K8 cluster') {

        docker.image("hashicorp/terraform:light").inside("--net=\'host\' --entrypoint=\'\'") {
            
            
            sh "terraform init"
            sh "terraform plan"
            sh "terraform apply --auto-approve"
        }
    }

    // clean workspace at the end of operations
    cleanWs()
}