node {    

    def image

    def GIT_COMMIT
    def PROJECT_NAME="${env.SERVICE}"
    def TAG

    properties ([
        parameters ([

                string(name: 'SERVICE', description: 'Service to be built/deployed'),
                string(name: 'NAMESPACE', defaultValue: 'default', description: 'K8 namespace to deploy the service to'),
                string(name: 'CLUSTER_ENDPOINT', description: 'K8 cluster endpoint'),
                string(name: 'TAG', description: 'Docker image tag. If left empty, it equals to the build number'),
        ])
    ])


    if (env.TAG == "") {

        TAG = BUILD_NUMBER
    }


    stage('Clone repository') {               

        checkout scm 

        GIT_COMMIT = sh(script: 'git rev-list -1 HEAD', returnStdout: true)

    } 

    stage('Test') {

        docker.image('erizzardi/gomagit:latest').inside("-v ${WORKSPACE}/:/project") { // run unit tests in a container with go, make and git
            
            STATUS = sh(script: "make test", returnStatus: true)
        }

        if (STATUS != 0) {
            error("Unit tests failed! Aborting.")
        }
    }

    stage('Build image') {         
    
        image = docker.build("erizzardi/${env.SERVICE}:${TAG}")
    }

    stage('Push image') {

        docker.withRegistry('https://registry.hub.docker.com/', 'docker-hub') {
        
            docker.build("erizzardi/${env.SERVICE}").push("${TAG}")
        }
    }

    stage('Deploy service to K8 cluster') {

        sh "kubectl apply -f kubernetes/templates/deployments/${env.SERVICE}"
    }


}