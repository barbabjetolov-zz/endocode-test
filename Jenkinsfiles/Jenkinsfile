node {    

    properties ([
        parameters ([

                string(name: 'SERVICE', description: 'Service to be built/deployed'),
                string(name: 'NAMESPACE', defaultValue: 'default', description: 'K8 namespace to deploy the service to'),
                string(name: 'TAG', description: 'Docker image tag. If left empty, it equals to the build number'),
        ])
    ])

    def IMAGE

    def GIT_COMMIT
    def PROJECT_NAME="${env.SERVICE}"
    def TAG

    def K8TOKEN = credentials('k8token')
    def K8SERVER = credentials('k8server')

    // def KUBECTL="kubectl --insecure-skip-tls-verify --token=${K8TOKEN} --server=${K8SERVER} -n ${env.NAMESPACE} --kubeconfig=/dev/null"


    if (env.TAG == "") {

        TAG = BUILD_NUMBER
    }

    // clean workspace before starting operations
    cleanWs()


    stage('Clone repository') {               

        checkout scm 

        GIT_COMMIT = sh(script: 'git rev-list -1 HEAD', returnStdout: true)

    }

    stage('Unit Tests') {

        docker.image('erizzardi/gomagit:latest').inside("-v ${WORKSPACE}/:/project") { // run unit tests in a container with go, make and git
            
            STATUS = sh(script: "make test", returnStatus: true)
        }

        if (STATUS != 0) {
            error("Unit tests failed! Aborting.")
        }
    }

    stage('Non-regression Tests') {

        // add non-regression tests!!
    }

    stage('Build image') {         
    
        IMAGE = docker.build("erizzardi/${env.SERVICE}:${TAG}")
    }

    // push image to dockerhub
    stage('Push image') {

        docker.withRegistry('https://registry.hub.docker.com/', 'docker-hub') {
        
            docker.build("erizzardi/${env.SERVICE}").push("${TAG}")
        }
    }

    stage('Deploy service to K8 cluster') {

        // deploy to k8 cluster with helm
        docker.image('alpine/helm:latest').inside("-v ${WORKSPACE}/:/project --entrypoint=''") {

            sh "helm upgrade --install ${env.SERVICE} ./project/${env.SERVICE}-chart --set service.type=NodePort --insecure-skip-tls-verify \
                --kube-apiserver=${K8SERVER}    \
                --kube-token=${K8TOKEN} \
                --set image.tag=${TAG}  \
                --set buildNumber=${BUILD_NUMBER}"
        }

        // change image tag in the deployment.yaml file
        // sh "sed -i \'s:{TAG}:${TAG}:g\' kubernetes/deployments/${env.SERVICE}.yaml"

        // create deployment
        // sh "${KUBECTL} apply -f kubernetes/deployments/${env.SERVICE}.yaml"
        // patch the yml to include the build number in the metadata
        // sh "${KUBECTL} patch deployment ${env.SERVICE} --patch \"{\\\"metadata\\\":{\\\"labels\\\":{\\\"build_number\\\":\\\"${BUILD_NUMBER}\\\"}}}\""
        // create the service
        // sh "${KUBECTL} expose deployment ${env.SERVICE} --type=NodePort --name=${env.SERVICE}"
    }

    // clean workspace at the end of operations
    cleanWs()
}