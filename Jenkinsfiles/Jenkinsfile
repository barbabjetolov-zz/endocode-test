node {    

    properties ([
        parameters ([

                string(name: 'SERVICE', description: 'Service to be built/deployed'),
                string(name: 'TAG', description: 'Docker image tag. If left empty, it equals to the build number'),
        ])
    ])

    def IMAGE

    def PROJECT_NAME="${env.SERVICE}"
    def TAG = env.TAG


    if (env.TAG == "") {

        TAG = BUILD_NUMBER
    }

    // clean workspace before starting operations
    cleanWs()


    stage('Clone repository') {               

        checkout scm

    }

    stage('Tests') {

        docker.image('erizzardi/gomagit:latest').inside { // run unit tests in a container with go, make and git
            
            STATUS = sh(script: "make test", returnStatus: true)
        }

        if (STATUS != 0) {
            error("Unit tests failed! Aborting.")
        }
    }


    stage('Build image') {         
    
        IMAGE = docker.build("erizzardi/${env.SERVICE}:${TAG}")
    }

    // push image to dockerhub
    stage('Push image') {

        docker.withRegistry('https://registry.hub.docker.com/', 'docker-hub') {
        
            docker.build("erizzardi/${env.SERVICE}").push("${TAG}")
        }

        // to remove intermediate image
        sh "docker prune --filter label=image=builder"
    }

    // deploy service to k8 cluster - requires authentication!
    stage('Deploy service to K8 cluster') {

        docker.image("hashicorp/terraform:light").inside("--net=\'host\' --entrypoint=\'\'") {
            
            
            sh "terraform init"
            sh "terraform plan"
            sh "terraform apply --auto-approve"
        }
    }

    // clean workspace at the end of operations
    cleanWs()
}